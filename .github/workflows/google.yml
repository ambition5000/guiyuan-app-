#此工作流将构建docker容器，发布到Google容器
#Registry，并在有到“main”的推送时将其部署到GKE
#分支。
#
#配置此工作流：
#
#1.启用以下Google云API：
#
#-工件注册表(artifactregistry.googleapis.com)
#-Google Kubernetes引擎(container.googleapis.com)
#-IAM凭据API(iamcredentials.googleapis.com)
#
#有关启用API的详细信息，请访问
#https://support.google.com/googleapi/answer/6158841.
#
#2.确保您的存储库包含您的
#Google Kubernetes引擎集群，包括部署.yml，
#kustomization.yml、service.yml等
#
#3.为GitHub创建和配置工作负载身份提供程序：
#https://github.com/google-github-actions/auth#preferred-direct-workload-Identity-federation。
#
#根据您的身份验证方式，您需要授予IAM主体
Google Cloud上的权限#：
#
#-工件注册表管理员(roles/artifactregistry.admin)
#-Kubernetes引擎开发人员(roles/container.developer)
#
#有关设置IAM权限的详细信息，请访问
#https://cloud.google.com/iam/docs/manage-access-other-resources
#
#5.更改“env”块中的值以匹配您的值。

姓名:'构建并部署到GKE'

在……之上:
推:
分支机构:
-'"main"'

env:
project_ID:'我的项目' #TODO：更新到您的Google Cloud项目ID
Gar_LOCATION:'us-central1' #TODO：更新到您所在地区
GKE_CLUSTER:'群集-1' #TODO：更新到您的群集名称
GKE_ZONE:'us-central1-c' #TODO：更新到您的群集区域
deployment_NAME:'gke-test' #TODO：更新到您的部署名称
存储库:'样本' #TODO：更新到您的工件注册表docker存储库名称
图像:'静态站点'
workload_IDENTITY_PROVIDER:'projects/123456789/location/global/workloadIdentityPools/my-pool/provider/my-provider' #TODO：更新到您的工作负载身份提供程序

工作:
设置-构建-发布-部署:
姓名:'设置、生成、发布和部署'
run-on:'UBUNTU-最新'
环境:'生产'

权限:
内容:'已读'
id-token:'写入'

步骤:
-姓名:'签出'
uses:'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' #操作/结帐@v4

      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2' # google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: 'Docker Auth'
        uses: 'docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567' # docker/login-action@v3
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.auth_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      # Get the GKE credentials so we can deploy to the cluster
      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@6051de21ad50fbb1767bc93c11357a49082ad116' # google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_ZONE }}'

      # Build the Docker image
      - name: 'Build and push Docker container'
        run: |-
          DOCKER_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}"

          docker build \
            --tag "${DOCKER_TAG}" \
            --build-arg GITHUB_SHA="${GITHUB_SHA}" \
            --build-arg GITHUB_REF="${GITHUB_REF}" \
            .

          docker push "${DOCKER_TAG}"

      # Set up kustomize
      - name: 'Set up Kustomize'
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.3/kustomize_v5.4.3_linux_amd64.tar.gz
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: 'Deploy to GKE'
        run: |-
          # replacing the image name in the k8s template
          ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
